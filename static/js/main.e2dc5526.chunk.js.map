{"version":3,"sources":["components/Counter.module.css","components/CounterSetup.module.css","components/Button.tsx","counter-reducer.ts","components/Counter.tsx","components/CounterSetup.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","onClick","disabled","buttonTitle","SET_COUNTER_VALUE","SET_MAX_VALUE","SET_START_VALUE","SET_TEXT_MODE","SET_BUTTON_DISABLE","SET_SETUP_BLOCK","setCounterValueAC","value","type","setMaxValueAC","setStartValueAC","setTextModeAC","mode","setDisableButtonAC","reducer","state","action","counterValue","maxValue","startValue","textMode","buttonDisable","setupBlock","Error","Counter","dispatch","setupButtonHandler","error","counterBlockClass","s","counterBlock","red","textInfoClass","textInfo","className","mainBlock","buttonBlock","setupButton","CounterSetup","maxValueInputClass","errorInput","startValueInputClass","valueDisplay","onChange","e","currentTarget","valueAsNumber","App","useReducer","useEffect","counterValueAsString","localStorage","getItem","JSON","parse","maxValueAsString","startValueAsString","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2dc5526.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"Counter_mainBlock__QEiOF\",\"counterBlock\":\"Counter_counterBlock__3JyRV\",\"buttonBlock\":\"Counter_buttonBlock__3VRPo\",\"red\":\"Counter_red__1vf0h\",\"textMode\":\"Counter_textMode__3CKss\",\"setupButton\":\"Counter_setupButton__omNmf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"CounterSetup_mainBlock__2yLcG\",\"counterBlock\":\"CounterSetup_counterBlock__23j3A\",\"valueDisplay\":\"CounterSetup_valueDisplay__RfxrD\",\"buttonBlock\":\"CounterSetup_buttonBlock__2csdq\",\"red\":\"CounterSetup_red__3vK9H\",\"errorInput\":\"CounterSetup_errorInput__2PkNE\"};","import React from 'react';\n\ntype ButtonPropsType = {\n    onClick: () => void\n    disabled: boolean\n    buttonTitle: string\n}\n\nexport function Button (props: ButtonPropsType) {\n\n    return (\n        <div>\n            <button onClick={props.onClick} disabled={props.disabled}>{props.buttonTitle}</button>\n        </div>\n    )\n}","import {StateType} from \"./App\";\n\nconst SET_COUNTER_VALUE = \"SET-COUNTER-VALUE\"\nconst SET_MAX_VALUE = \"SET-MAX-VALUE\"\nconst SET_START_VALUE = \"SET-START-VALUE\"\nconst SET_TEXT_MODE = \"SET-TEXT-MODE\"\nconst SET_BUTTON_DISABLE = \"SET-BUTTON-DISABLE\"\nconst SET_SETUP_BLOCK = \"SET-SETUP-BLOCK\"\n\nexport const setCounterValueAC = (value: number) => {\n    return {\n        type: SET_COUNTER_VALUE,\n        value: value\n    } as const\n}\nexport const setMaxValueAC = (value: number) => {\n    return {\n        type: SET_MAX_VALUE,\n        value: value\n    } as const\n}\nexport const setStartValueAC = (value: number) => {\n    return {\n        type: SET_START_VALUE,\n        value: value\n    } as const\n}\nexport const setTextModeAC = (mode: boolean) => {\n    return {\n        type: SET_TEXT_MODE,\n        mode: mode\n    } as const\n}\nexport const setDisableButtonAC = (mode: boolean) => {\n    return {\n        type: SET_BUTTON_DISABLE,\n        mode: mode\n    } as const\n}\nexport const setBlockSetupAC = (mode: boolean) => {\n    return {\n        type: SET_SETUP_BLOCK,\n        mode: mode\n    } as const\n}\n\ntype setMaxValueType = ReturnType<typeof setMaxValueAC>\ntype setCounterValueType = ReturnType<typeof setCounterValueAC>\ntype setStartValueType = ReturnType<typeof setStartValueAC>\ntype setTextModeType = ReturnType<typeof setTextModeAC>\ntype setDisableButtonType = ReturnType<typeof setDisableButtonAC>\ntype setBlockSetupType = ReturnType<typeof setBlockSetupAC>\n\nexport type ActionType = setMaxValueType | setCounterValueType | setStartValueType\n    | setTextModeType | setDisableButtonType | setBlockSetupType\n\nexport const reducer = (state: StateType, action: ActionType): StateType => {\n    switch (action.type) {\n        case SET_COUNTER_VALUE:\n            return {...state, counterValue: action.value}\n        case SET_MAX_VALUE:\n            return {...state, maxValue: action.value}\n        case SET_START_VALUE:\n            return {...state, startValue: action.value}\n        case SET_TEXT_MODE:\n            return {...state, textMode: action.mode}\n        case SET_BUTTON_DISABLE:\n            return {...state, buttonDisable: action.mode}\n        case SET_SETUP_BLOCK:\n            return {...state, setupBlock: action.mode}\n        default:\n            throw new Error('Wrong action type!!!')\n    }\n    return state;\n}\n","import React from 'react';\nimport {Button} from './Button';\nimport s from \"./Counter.module.css\"\nimport {StateType} from \"../App\";\nimport {ActionType, setCounterValueAC} from \"../counter-reducer\";\n\ntype CounterPropsType = {\n    state: StateType\n    dispatch: (action: ActionType) => void\n    setupButtonHandler: () => void\n}\n\nconst Counter: React.FC<CounterPropsType> = ({state,dispatch, setupButtonHandler}) =>  {\n    const maxValue = state.maxValue\n    const startValue = state.startValue\n    const counterValue = state.counterValue\n    const textMode = state.textMode\n    const error = startValue < 0 || maxValue < 0 || maxValue <= startValue\n\n    const counterBlockClass = `${s.counterBlock} ${counterValue === maxValue ? s.red : \"\"}`\n    const textInfoClass = `${error ? s.red : \"\"}`\n\n    let textInfo = error ? \"Incorrect value!\" : \"enter values and press \\'set\\'\"\n\n    const onIncClickHandler = () => dispatch(setCounterValueAC(counterValue + 1))\n    const onResetClickHandler = () => dispatch(setCounterValueAC(startValue))\n\n    return (\n        <div>\n            <div className={s.mainBlock}>\n                <div className={textMode ? s.textMode : counterBlockClass}>\n                    {textMode ? <span className={textInfoClass}>{textInfo}</span> :\n                    <span>{counterValue}</span>}\n                </div>\n                <div className={s.buttonBlock}>\n                    <Button onClick={onIncClickHandler}\n                            buttonTitle={\"inc\"}\n                            disabled={counterValue === maxValue || textMode}/>\n                    <Button onClick={onResetClickHandler}\n                            buttonTitle={\"reset\"}\n                            disabled={counterValue === startValue || textMode}/>\n                    <div className={state.setupBlock ? s.setupButton : \"\"}>\n                        <Button onClick={setupButtonHandler} disabled={false} buttonTitle={\"setup\"}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Counter","import React, {ChangeEvent} from 'react';\nimport {Button} from './Button';\nimport s from './CounterSetup.module.css'\nimport {StateType} from \"../App\";\nimport {ActionType, setCounterValueAC, setDisableButtonAC,\n    setMaxValueAC, setStartValueAC, setTextModeAC} from \"../counter-reducer\";\n\ntype CounterSetupPropsType = {\n    state: StateType\n    dispatch: (action: ActionType) => void\n}\n\nconst CounterSetup: React.FC<CounterSetupPropsType> = ({state,dispatch}) => {\n    const maxValue = state.maxValue\n    const startValue = state.startValue\n\n    const onSetClickHandler = () => {\n        dispatch(setMaxValueAC(maxValue))\n        dispatch(setCounterValueAC(startValue))\n        dispatch(setTextModeAC(false))\n        dispatch(setDisableButtonAC(true))\n    }\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMaxValueAC(e.currentTarget.valueAsNumber))\n        e.currentTarget.valueAsNumber < 0 || e.currentTarget.valueAsNumber <= startValue\n            ? dispatch(setDisableButtonAC(true))\n            : dispatch(setDisableButtonAC(false));\n        dispatch(setTextModeAC(true))\n    }\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setStartValueAC(e.currentTarget.valueAsNumber));\n        e.currentTarget.valueAsNumber < 0 || e.currentTarget.valueAsNumber >= maxValue\n            ? dispatch(setDisableButtonAC(true))\n            : dispatch(setDisableButtonAC(false));\n        dispatch(setTextModeAC(true))\n    }\n\n    const maxValueInputClass = maxValue < 0 || maxValue <= startValue ? s.errorInput : \"\"\n    const startValueInputClass = startValue < 0 || maxValue <= startValue ? s.errorInput : \"\"\n\n    return (\n        <div>\n            <div className={s.mainBlock}>\n                <div className={s.counterBlock}>\n                    <div className={s.valueDisplay}>\n                        <span>max value: </span>\n                        <input className={maxValueInputClass}\n                               value={maxValue}\n                               type={\"number\"}\n                               onChange={onChangeMaxValue}/>\n                    </div>\n                    <div className={s.valueDisplay}>\n                        <span>start value: </span>\n                        <input\n                            className={startValueInputClass}\n                            value={startValue}\n                            type={\"number\"}\n                            onChange={onChangeStartValue}/>\n                    </div>\n                </div>\n                <div className={s.buttonBlock}>\n                    <Button onClick={onSetClickHandler}\n                            buttonTitle={\"set\"}\n                            disabled={state.buttonDisable}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CounterSetup","import React, {useEffect, useReducer} from 'react';\nimport \"./App.css\"\nimport Counter from './components/Counter';\nimport CounterSetup from \"./components/CounterSetup\";\nimport {reducer, setBlockSetupAC, setCounterValueAC, setMaxValueAC, setStartValueAC} from \"./counter-reducer\";\nimport {Button} from \"./components/Button\";\n\nexport type StateType = {\n    counterValue: number\n    maxValue: number\n    startValue: number\n    textMode: boolean\n    buttonDisable: boolean\n    setupBlock: boolean\n}\n\nfunction App() {\n\n    const [state, dispatch] = useReducer(reducer, {\n        counterValue: 0,\n        maxValue: 5,\n        startValue: 0,\n        textMode: false,\n        buttonDisable: true,\n        setupBlock: false\n    })\n\n    useEffect(() => {\n        let counterValueAsString = localStorage.getItem('counterValue')\n        if (counterValueAsString) {\n            dispatch(setCounterValueAC(JSON.parse(counterValueAsString)))\n        }\n        let maxValueAsString = localStorage.getItem('maxValue')\n        if (maxValueAsString) {\n            dispatch(setMaxValueAC(JSON.parse(maxValueAsString)))\n        }\n        let startValueAsString = localStorage.getItem('startValue')\n        if (startValueAsString) {\n            dispatch(setStartValueAC(JSON.parse(startValueAsString)))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('counterValue', JSON.stringify(state.counterValue))\n        localStorage.setItem('maxValue', JSON.stringify(state.maxValue))\n        localStorage.setItem('startValue', JSON.stringify(state.startValue))\n    }, [state.counterValue, state.maxValue, state.startValue])\n\n    const setupButtonHandler = () => dispatch(setBlockSetupAC(!state.setupBlock))\n\n    return (\n        <div className={\"App\"}>\n            <div>\n                <Counter state={state} dispatch={dispatch} setupButtonHandler={setupButtonHandler}/>\n            </div>\n            <div>\n                <div>\n                    {state.setupBlock && <CounterSetup state={state} dispatch={dispatch}/>}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}