{"version":3,"sources":["components/Button.tsx","bll/counter-reducer.ts","components/Counter.tsx","components/CounterSetup.tsx","App.tsx","bll/store.ts","reportWebVitals.ts","index.tsx","components/CounterSetup.module.css","components/Counter.module.css"],"names":["Button","onClick","disabled","buttonTitle","SET_COUNTER_VALUE","SET_MAX_VALUE","SET_START_VALUE","SET_TEXT_MODE","SET_BUTTON_DISABLE","SET_SETUP_BLOCK","setCounterValueAC","counterValue","type","payload","setMaxValueAC","maxValue","setTextModeAC","textMode","setDisableButtonAC","buttonDisable","InitialState","startValue","setupBlock","Counter","dispatch","useDispatch","state","useSelector","error","counterBlockClass","s","counterBlock","red","textInfoClass","textInfo","className","mainBlock","buttonBlock","CounterSetup","maxValueInputClass","errorInput","startValueInputClass","valueDisplay","value","onChange","e","currentTarget","valueAsNumber","setStartValueAC","App","preloadedState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","persistedTodostring","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.63812b96.chunk.js","sourcesContent":["import React from 'react';\n\ntype ButtonPropsType = {\n    onClick: () => void\n    disabled: boolean\n    buttonTitle: string\n}\n\nexport const Button: React.FC<ButtonPropsType> = ({onClick, disabled, buttonTitle}) => {\n    return (\n        <div>\n            <button onClick={onClick} disabled={disabled}>{buttonTitle}</button>\n        </div>\n    )\n}","\n\nconst SET_COUNTER_VALUE = \"SET-COUNTER-VALUE\"\nconst SET_MAX_VALUE = \"SET-MAX-VALUE\"\nconst SET_START_VALUE = \"SET-START-VALUE\"\nconst SET_TEXT_MODE = \"SET-TEXT-MODE\"\nconst SET_BUTTON_DISABLE = \"SET-BUTTON-DISABLE\"\nconst SET_SETUP_BLOCK = \"SET-SETUP-BLOCK\"\n\nexport const setCounterValueAC = (counterValue: number) => {\n    return {\n        type: SET_COUNTER_VALUE,\n        payload: {counterValue}\n    } as const\n}\nexport const setMaxValueAC = (maxValue: number) => {\n    return {\n        type: SET_MAX_VALUE,\n        payload: {maxValue}\n    } as const\n}\nexport const setStartValueAC = (startValue: number) => {\n    return {\n        type: SET_START_VALUE,\n        payload: {startValue}\n    } as const\n}\nexport const setTextModeAC = (textMode: boolean) => {\n    return {\n        type: SET_TEXT_MODE,\n        payload: {textMode}\n    } as const\n}\nexport const setDisableButtonAC = (buttonDisable: boolean) => {\n    return {\n        type: SET_BUTTON_DISABLE,\n        payload: {buttonDisable}\n    } as const\n}\nexport const setBlockSetupAC = (setupBlock: boolean) => {\n    return {\n        type: SET_SETUP_BLOCK,\n        payload: {setupBlock}\n    } as const\n}\n\ntype setMaxValueType = ReturnType<typeof setMaxValueAC>\ntype setCounterValueType = ReturnType<typeof setCounterValueAC>\ntype setStartValueType = ReturnType<typeof setStartValueAC>\ntype setTextModeType = ReturnType<typeof setTextModeAC>\ntype setDisableButtonType = ReturnType<typeof setDisableButtonAC>\ntype setBlockSetupType = ReturnType<typeof setBlockSetupAC>\n\nexport type ActionType = setMaxValueType | setCounterValueType | setStartValueType\n    | setTextModeType | setDisableButtonType | setBlockSetupType\n\nexport type InitialStateType = typeof InitialState\n\nconst InitialState = {\n    counterValue: 0,\n    maxValue: 5,\n    startValue: 0,\n    textMode: false,\n    buttonDisable: true,\n    setupBlock: false\n}\n\nexport const reducer = (state: InitialStateType = InitialState, action: ActionType): InitialStateType => {\n    switch (action.type) {\n        case SET_COUNTER_VALUE:\n        case SET_MAX_VALUE:\n        case SET_START_VALUE:\n        case SET_TEXT_MODE:\n        case SET_BUTTON_DISABLE:\n        case SET_SETUP_BLOCK:\n            return {...state, ...action.payload}\n        default:\n           return state\n    }\n    return state;\n}\n","import React from 'react';\nimport {Button} from './Button';\nimport s from \"./Counter.module.css\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../bll/store\";\nimport {InitialStateType, setBlockSetupAC, setCounterValueAC} from \"../bll/counter-reducer\";\n\n\nconst Counter = () =>  {\n    const dispatch = useDispatch()\n    const state = useSelector<AppRootStateType, InitialStateType>(state => state.state)\n    const maxValue = state.maxValue\n    const startValue = state.startValue\n    const counterValue = state.counterValue\n    const textMode = state.textMode\n    const error = startValue < 0 || maxValue < 0 || maxValue <= startValue\n    const counterBlockClass = `${s.counterBlock} ${counterValue === maxValue ? s.red : \"\"}`\n    const textInfoClass = `${error ? s.red : \"\"}`\n\n    let textInfo = error ? \"Incorrect value!\" : \"enter values and press \\'set\\'\"\n\n    const onIncClickHandler = () => dispatch(setCounterValueAC(counterValue + 1))\n    const onResetClickHandler = () => dispatch(setCounterValueAC(startValue))\n    const setupButtonHandler = () => dispatch(setBlockSetupAC(!state.setupBlock))\n\n    return (\n        <div>\n            <div className={s.mainBlock}>\n                <div className={textMode ? s.textMode : counterBlockClass}>\n                    {textMode ? <span className={textInfoClass}>{textInfo}</span> :\n                    <span>{counterValue}</span>}\n                </div>\n                <div className={s.buttonBlock}>\n                    <Button onClick={onIncClickHandler}\n                            buttonTitle={\"inc\"}\n                            disabled={counterValue === maxValue || textMode}/>\n                    <Button onClick={onResetClickHandler}\n                            buttonTitle={\"reset\"}\n                            disabled={counterValue === startValue || textMode}/>\n                    <div>\n                        <Button onClick={setupButtonHandler} disabled={false} buttonTitle={\"setup\"}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Counter","import React, {ChangeEvent} from 'react';\nimport {Button} from './Button';\nimport s from './CounterSetup.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../bll/store\";\nimport {\n    InitialStateType,\n    setCounterValueAC,\n    setDisableButtonAC,\n    setMaxValueAC, setStartValueAC,\n    setTextModeAC\n} from \"../bll/counter-reducer\";\n\nconst CounterSetup = () => {\n    const dispatch = useDispatch()\n    const state = useSelector<AppRootStateType, InitialStateType>(state => state.state)\n    const maxValue = state.maxValue\n    const startValue = state.startValue\n\n    const onSetClickHandler = () => {\n        dispatch(setMaxValueAC(maxValue))\n        dispatch(setCounterValueAC(startValue))\n        dispatch(setTextModeAC(false))\n        dispatch(setDisableButtonAC(true))\n    }\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMaxValueAC(e.currentTarget.valueAsNumber))\n        e.currentTarget.valueAsNumber < 1 || e.currentTarget.valueAsNumber <= startValue\n            ? dispatch(setDisableButtonAC(true))\n            : dispatch(setDisableButtonAC(false));\n        dispatch(setTextModeAC(true))\n    }\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setStartValueAC(e.currentTarget.valueAsNumber));\n        e.currentTarget.valueAsNumber < 0 || e.currentTarget.valueAsNumber >= maxValue\n            ? dispatch(setDisableButtonAC(true))\n            : dispatch(setDisableButtonAC(false));\n        dispatch(setTextModeAC(true))\n    }\n\n    const maxValueInputClass = maxValue < 0 || maxValue <= startValue ? s.errorInput : \"\"\n    const startValueInputClass = startValue < 0 || maxValue <= startValue ? s.errorInput : \"\"\n\n    return (\n        <div>\n            <div className={s.mainBlock}>\n                <div className={s.counterBlock}>\n                    <div className={s.valueDisplay}>\n                        <span>max value: </span>\n                        <input className={maxValueInputClass}\n                               value={maxValue}\n                               type={\"number\"}\n                               onChange={onChangeMaxValue}/>\n                    </div>\n                    <div className={s.valueDisplay}>\n                        <span>start value: </span>\n                        <input\n                            className={startValueInputClass}\n                            value={startValue}\n                            type={\"number\"}\n                            onChange={onChangeStartValue}/>\n                    </div>\n                </div>\n                <div className={s.buttonBlock}>\n                    <Button onClick={onSetClickHandler}\n                            buttonTitle={\"set\"}\n                            disabled={state.buttonDisable}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CounterSetup","import React from 'react';\nimport \"./App.css\"\nimport Counter from './components/Counter';\nimport CounterSetup from \"./components/CounterSetup\";\nimport {useSelector} from \"react-redux\";\nimport {InitialStateType} from \"./bll/counter-reducer\";\nimport {AppRootStateType} from \"./bll/store\";\n\nfunction App() {\n    const state = useSelector<AppRootStateType, InitialStateType>(state => state.state)\n\n    return (\n        <div className={\"App\"}>\n            <div>\n                <Counter/>\n            </div>\n            <div>\n                <div>\n                    {state.setupBlock && <CounterSetup/>}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","import {combineReducers, createStore} from \"redux\";\nimport {reducer} from \"./counter-reducer\";\n\n\nconst rootReducer = combineReducers({\n    state: reducer\n})\n\nlet preloadedState;\nconst persistedTodostring = localStorage.getItem('app-state')\nif (persistedTodostring) {\n    preloadedState = JSON.parse(persistedTodostring)\n}\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer,preloadedState)\n\nstore.subscribe(() => {\n    localStorage.setItem('app-state',JSON.stringify(store.getState()))\n})","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"CounterSetup_mainBlock__2yLcG\",\"counterBlock\":\"CounterSetup_counterBlock__23j3A\",\"valueDisplay\":\"CounterSetup_valueDisplay__RfxrD\",\"buttonBlock\":\"CounterSetup_buttonBlock__2csdq\",\"red\":\"CounterSetup_red__3vK9H\",\"errorInput\":\"CounterSetup_errorInput__2PkNE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"Counter_mainBlock__QEiOF\",\"counterBlock\":\"Counter_counterBlock__3JyRV\",\"buttonBlock\":\"Counter_buttonBlock__3VRPo\",\"red\":\"Counter_red__1vf0h\",\"textMode\":\"Counter_textMode__3CKss\",\"setupButton\":\"Counter_setupButton__omNmf\"};"],"sourceRoot":""}