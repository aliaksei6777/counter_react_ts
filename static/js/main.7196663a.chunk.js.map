{"version":3,"sources":["components/CounterSetup.module.css","components/Counter.module.css","components/Buttons.tsx","counter-reducer.ts","components/Counter.tsx","components/CounterSetup.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Buttons","props","onClick","disabled","buttonTitle","setCounterValueAC","value","type","setMaxValueAC","setStartValueAC","setTextModeAC","mode","setDisableButtonAC","reducer","state","action","counterValue","maxValue","startValue","textMode","buttonDisable","Counter","dispatch","error","counterBlockClass","s","counterBlock","red","textInfoClass","textInfo","className","mainBlock","buttonBlock","CounterSetup","maxValueInputClass","errorInput","startValueInputClass","valueDisplay","onChange","e","currentTarget","valueAsNumber","App","useReducer","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7196663a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"CounterSetup_mainBlock__2yLcG\",\"counterBlock\":\"CounterSetup_counterBlock__23j3A\",\"valueDisplay\":\"CounterSetup_valueDisplay__RfxrD\",\"buttonBlock\":\"CounterSetup_buttonBlock__2csdq\",\"red\":\"CounterSetup_red__3vK9H\",\"errorInput\":\"CounterSetup_errorInput__2PkNE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"Counter_mainBlock__QEiOF\",\"counterBlock\":\"Counter_counterBlock__3JyRV\",\"buttonBlock\":\"Counter_buttonBlock__3VRPo\",\"red\":\"Counter_red__1vf0h\",\"textMode\":\"Counter_textMode__3CKss\"};","import React from 'react';\n\ntype ButtonsPropsType = {\n    onClick: () => void\n    disabled: boolean\n    buttonTitle: string\n}\n\nexport function Buttons (props: ButtonsPropsType) {\n\n    return (\n        <div>\n            <button onClick={props.onClick} disabled={props.disabled}>{props.buttonTitle}</button>\n        </div>\n    )\n}","import {StateRootType} from \"./App\";\n\n\nexport const setCounterValueAC = (value: number) => {\n    return {\n        type: \"SET_COUNTER_VALUE\",\n        value: value\n    } as const\n}\nexport const setMaxValueAC = (value: number) => {\n    return {\n        type: \"SET_MAX_VALUE\",\n        value: value\n    } as const\n}\nexport const setStartValueAC = (value: number) => {\n    return {\n        type: \"SET_START_VALUE\",\n        value: value\n    } as const\n}\nexport const setTextModeAC = (mode: boolean) => {\n    return {\n        type: \"SET_TEXT_MODE\",\n        mode: mode\n    } as const\n}\nexport const setDisableButtonAC = (mode: boolean) => {\n    return {\n        type: \"SET_BUTTON_DISABLE\",\n        mode: mode\n    } as const\n}\n\ntype setMaxValueType = ReturnType<typeof setMaxValueAC>\ntype setCounterValueType = ReturnType<typeof setCounterValueAC>\ntype setStartValueType = ReturnType<typeof setStartValueAC>\ntype setTextModeType = ReturnType<typeof setTextModeAC>\ntype setDisableButtonType = ReturnType<typeof setDisableButtonAC>\n\nexport type ActionType = setMaxValueType | setCounterValueType | setStartValueType | setTextModeType | setDisableButtonType\n\nexport const reducer = (state: StateRootType, action: ActionType): StateRootType => {\n    switch (action.type) {\n        case \"SET_COUNTER_VALUE\":\n            return {...state, counterValue: action.value}\n        case \"SET_MAX_VALUE\":\n            return {...state, maxValue: action.value}\n        case \"SET_START_VALUE\":\n            return {...state, startValue: action.value}\n        case \"SET_TEXT_MODE\":\n            return {...state, textMode: action.mode}\n        case \"SET_BUTTON_DISABLE\":\n            return {...state, buttonDisable: action.mode}\n    }\n    return state;\n}\n","import React from 'react';\nimport {Buttons} from './Buttons';\nimport s from \"./Counter.module.css\"\nimport {StateRootType} from \"../App\";\nimport {ActionType, setCounterValueAC} from \"../counter-reducer\";\n\ntype CounterPropsType = {\n    state: StateRootType\n    dispatch: (action: ActionType) => void\n}\n\nconst Counter: React.FC<CounterPropsType> = ({state,dispatch}) =>  {\n    const maxValue = state.maxValue\n    const startValue = state.startValue\n    const counterValue = state.counterValue\n    const textMode = state.textMode\n    const error = startValue < 0 || maxValue < 0 || maxValue <= startValue\n\n    const counterBlockClass = `${s.counterBlock} ${counterValue === maxValue ? s.red : \"\"}`\n    const textInfoClass = `${error ? s.red : \"\"}`\n\n    let textInfo = error ? \"Incorrect value!\" : \"enter values and press \\'set\\'\"\n\n    const onIncClickHandler = () => dispatch(setCounterValueAC(counterValue + 1))\n    const onResetClickHandler = () => dispatch(setCounterValueAC(startValue))\n\n    return (\n        <div>\n            <div className={s.mainBlock}>\n                <div className={textMode ? s.textMode : counterBlockClass}>\n                    {textMode ? <span className={textInfoClass}>{textInfo}</span> :\n                    <span>{counterValue}</span>}\n                </div>\n                <div className={s.buttonBlock}>\n                    <Buttons onClick={onIncClickHandler}\n                             buttonTitle={\"inc\"}\n                             disabled={counterValue === maxValue || textMode}/>\n                    <Buttons onClick={onResetClickHandler}\n                             buttonTitle={\"reset\"}\n                             disabled={counterValue === startValue || textMode}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Counter","import React, {ChangeEvent} from 'react';\nimport {Buttons} from './Buttons';\nimport s from './CounterSetup.module.css'\nimport {StateRootType} from \"../App\";\nimport {ActionType, setCounterValueAC, setDisableButtonAC,\n    setMaxValueAC, setStartValueAC, setTextModeAC} from \"../counter-reducer\";\n\ntype CounterSetupPropsType = {\n    state: StateRootType\n    dispatch: (action: ActionType) => void\n}\n\nconst CounterSetup: React.FC<CounterSetupPropsType> = ({state,dispatch}) => {\n    const maxValue = state.maxValue\n    const startValue = state.startValue\n\n    const onSetClickHandler = () => {\n        dispatch(setMaxValueAC(maxValue))\n        dispatch(setCounterValueAC(startValue))\n        dispatch(setTextModeAC(false))\n        dispatch(setDisableButtonAC(true))\n    }\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMaxValueAC(e.currentTarget.valueAsNumber))\n        e.currentTarget.valueAsNumber < 0 || e.currentTarget.valueAsNumber <= startValue\n            ? dispatch(setDisableButtonAC(true))\n            : dispatch(setDisableButtonAC(false));\n        dispatch(setTextModeAC(true))\n    }\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setStartValueAC(e.currentTarget.valueAsNumber));\n        e.currentTarget.valueAsNumber < 0 || e.currentTarget.valueAsNumber >= maxValue\n            ? dispatch(setDisableButtonAC(true))\n            : dispatch(setDisableButtonAC(false));\n        dispatch(setTextModeAC(true))\n    }\n\n    const maxValueInputClass = maxValue < 0 || maxValue <= startValue ? s.errorInput : \"\"\n    const startValueInputClass = startValue < 0 || maxValue <= startValue ? s.errorInput : \"\"\n\n    return (\n        <div>\n            <div className={s.mainBlock}>\n                <div className={s.counterBlock}>\n                    <div className={s.valueDisplay}>\n                        <span>max value: </span>\n                        <input className={maxValueInputClass}\n                               value={maxValue}\n                               type={\"number\"}\n                               onChange={onChangeMaxValue}/>\n                    </div>\n                    <div className={s.valueDisplay}>\n                        <span>start value: </span>\n                        <input\n                            className={startValueInputClass}\n                            value={startValue}\n                            type={\"number\"}\n                            onChange={onChangeStartValue}/>\n                    </div>\n                </div>\n                <div className={s.buttonBlock}>\n                    <Buttons onClick={onSetClickHandler}\n                             buttonTitle={\"set\"}\n                             disabled={state.buttonDisable}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CounterSetup","import React, {useEffect, useReducer} from 'react';\nimport \"./App.css\"\nimport Counter from './components/Counter';\nimport CounterSetup from \"./components/CounterSetup\";\nimport {reducer, setCounterValueAC, setMaxValueAC, setStartValueAC} from \"./counter-reducer\";\n\nexport type StateRootType = {\n    counterValue: number\n    maxValue: number\n    startValue: number\n    textMode: boolean\n    buttonDisable: boolean\n}\n\nfunction App() {\n\n    const [state, dispatch] = useReducer(reducer, {\n        counterValue: 0,\n        maxValue: 5,\n        startValue: 0,\n        textMode: false,\n        buttonDisable: true\n    })\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('counterValue')\n        if(valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            // setCounterValue(newValue)\n            dispatch(setCounterValueAC(newValue))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('counterValue',JSON.stringify(state.counterValue))\n    }, [state.counterValue])\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('maxValue')\n        if(valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            dispatch(setMaxValueAC(newValue))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('maxValue',JSON.stringify(state.maxValue))\n    }, [state.maxValue])\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('startValue')\n        if(valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            dispatch(setStartValueAC(newValue))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('startValue',JSON.stringify(state.startValue))\n    }, [state.startValue])\n\n    return (\n        <div>\n            <div className={\"App\"}>\n                <CounterSetup\n                    state={state}\n                    dispatch={dispatch}/>\n                <Counter\n                    state={state}\n                    dispatch={dispatch}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}