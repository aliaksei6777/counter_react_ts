{"version":3,"sources":["components/CounterSetup.module.css","components/Counter.module.css","components/Buttons.tsx","components/Counter.tsx","components/CounterSetup.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Buttons","props","onClick","disabled","buttonTitle","Counter","counterBlockClass","s","counterBlock","counterValue","maxValue","red","textInfoClass","startValue","textInfo","className","mainBlock","textMode","buttonBlock","onIncClickHandler","onResetClickHandler","CounterSetup","useState","buttonDisabled","setButtonDisabled","maxValueInputClass","errorInput","startValueInputClass","valueDisplay","value","type","onChange","e","setMaxValue","currentTarget","valueAsNumber","setTextMode","setStartValue","setCounterValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.788c9664.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"CounterSetup_mainBlock__2yLcG\",\"counterBlock\":\"CounterSetup_counterBlock__23j3A\",\"valueDisplay\":\"CounterSetup_valueDisplay__RfxrD\",\"buttonBlock\":\"CounterSetup_buttonBlock__2csdq\",\"red\":\"CounterSetup_red__3vK9H\",\"errorInput\":\"CounterSetup_errorInput__2PkNE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"Counter_mainBlock__QEiOF\",\"counterBlock\":\"Counter_counterBlock__3JyRV\",\"buttonBlock\":\"Counter_buttonBlock__3VRPo\",\"red\":\"Counter_red__1vf0h\",\"textMode\":\"Counter_textMode__3CKss\"};","import React from 'react';\n\ntype ButtonsPropsType = {\n    onClick: () => void\n    disabled: boolean\n    buttonTitle: string\n}\n\nexport function Buttons (props: ButtonsPropsType) {\n\n    return (\n        <div>\n            <button onClick={props.onClick} disabled={props.disabled}>{props.buttonTitle}</button>\n        </div>\n    )\n}","import React from 'react';\nimport {Buttons} from './Buttons';\nimport s from \"./Counter.module.css\"\ntype CounterPropsType = {\n    maxValue: number\n    counterValue: number\n    startValue: number\n    onIncClickHandler:() => void\n    onResetClickHandler:() => void\n    textMode: boolean\n}\n\nfunction Counter(props: CounterPropsType) {\n\n    const counterBlockClass = `${s.counterBlock} ${props.counterValue === props.maxValue ? s.red : \"\"}`\n    const textInfoClass = `${props.startValue < 0 || props.maxValue < 0 || props.maxValue <= props.startValue ? s.red : \"\"}`\n    let textInfo = \"\"\n    if (props.startValue < 0 || props.maxValue < 0 || props.maxValue <= props.startValue) {\n        textInfo = \"Incorrect value!\"\n    } else {textInfo = \"enter values and press \\'set\\'\"}\n\n\n    return (\n        <div>\n            <div className={s.mainBlock}>\n                <div className={props.textMode ? s.textMode : counterBlockClass}>\n                    {props.textMode ? <span className={textInfoClass}>{textInfo}</span> :\n                    <span>{props.counterValue}</span>}\n                </div>\n                <div className={s.buttonBlock}>\n                    <Buttons onClick={props.onIncClickHandler}\n                             buttonTitle={\"inc\"}\n                             disabled={props.counterValue === props.maxValue || props.textMode}\n                    />\n                    <Buttons onClick={props.onResetClickHandler}\n                             buttonTitle={\"reset\"}\n                             disabled={props.counterValue === 0}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Counter","import React, {ChangeEvent, useState} from 'react';\nimport {Buttons} from './Buttons';\nimport s from \"./CounterSetup.module.css\"\n\ntype CounterSetupPropsType = {\n    maxValue: number\n    startValue: number\n    setCounterValue: (value: number) => void\n    setMaxValue: (value: number) => void\n    setTextMode: (textMode: boolean) => void\n    setStartValue: (startValue: number) => void\n}\n\nfunction CounterSetup(props: CounterSetupPropsType) {\n    const [buttonDisabled, setButtonDisabled] = useState(true)\n\n    const onSetHandler = () => {\n        props.setMaxValue(props.maxValue)\n        props.setCounterValue(props.startValue)\n        props.setTextMode(false)\n        setButtonDisabled(true)\n    }\n    const onMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.setMaxValue(e.currentTarget.valueAsNumber);\n        e.currentTarget.valueAsNumber < 0 || e.currentTarget.valueAsNumber <= props.startValue ?\n            setButtonDisabled(true) : setButtonDisabled(false);\n        props.setTextMode(true);\n    }\n    const onStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.setStartValue(e.currentTarget.valueAsNumber);\n        e.currentTarget.valueAsNumber < 0 || e.currentTarget.valueAsNumber >= props.maxValue ?\n            setButtonDisabled(true) : setButtonDisabled(false);\n        props.setTextMode(true);\n    }\n    const maxValueInputClass = props.maxValue < 0 || props.maxValue <= props.startValue ? s.errorInput : \"\"\n    const startValueInputClass = props.startValue < 0 || props.maxValue <= props.startValue ? s.errorInput : \"\"\n\n    return (\n        <div>\n            <div className={s.mainBlock}>\n                <div className={s.counterBlock}>\n                    <div className={s.valueDisplay}>\n                        <span>max value: </span>\n                        <input className={maxValueInputClass}\n                               value={props.maxValue}\n                               type={\"number\"}\n                               onChange={onMaxValueHandler}/>\n                    </div>\n                    <div className={s.valueDisplay}>\n                        <span>start value: </span>\n                        <input\n                            className={startValueInputClass}\n                            value={props.startValue}\n                            type={\"number\"}\n                            onChange={onStartValueHandler}/>\n                    </div>\n                </div>\n                <div className={s.buttonBlock}>\n                    <Buttons onClick={onSetHandler}\n                             buttonTitle={\"set\"}\n                             disabled={buttonDisabled}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CounterSetup","import React, {useState} from 'react';\nimport \"./App.css\"\nimport Counter from './components/Counter';\nimport CounterSetup from \"./components/CounterSetup\";\n\n\n\nfunction App() {\n\n    const [counterValue, setCounterValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [startValue, setStartValue] = useState<number>(0)\n    const [textMode,setTextMode] = useState<boolean>(false)\n\n    const onIncClickHandler = () => setCounterValue(counterValue + 1)\n    const onResetClickHandler = () => setCounterValue(0)\n\n    return (\n        <div>\n            <div className={\"App\"}>\n                <CounterSetup\n                    maxValue={maxValue}\n                    startValue={startValue}\n                    setCounterValue={setCounterValue}\n                    setMaxValue={setMaxValue}\n                    setTextMode={setTextMode}\n                    setStartValue={setStartValue}\n                />\n                <Counter\n                    counterValue={counterValue}\n                    maxValue={maxValue}\n                    startValue={startValue}\n                    onIncClickHandler={onIncClickHandler}\n                    onResetClickHandler={onResetClickHandler}\n                    textMode={textMode}\n                />\n            </div>\n            <div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}